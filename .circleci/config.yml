version: 2.1
orbs:
  slack: circleci/slack@4.1

jobs:
#----------- Job 1 ----------------
  linting:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/project

    steps:
      - checkout

      - run:
          name: checking paths
          command: |
            echo 'path is:' ${pwd}
            echo 'the path is:'
            pwd
            ls -la
            ls -la ~/project/.circleci/dockerstuff

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd ~/project/.circleci/dockerstuff
            python3 -m venv venv
            ls -l venv
            ls -l venv/bin
            . venv/bin/activate
            apt-get -y install make
            make --version
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint

      - save_cache:
            paths:
              - ./venv
            key: v1-dependencies-{{ checksum "~/project/.circleci/dockerstuff/requirements.txt" }}

      # run lint!
      - run:
          name: Run lint
          command: |
            cd ~/project/.circleci/dockerstuff
            . venv/bin/activate
            make install
            make lint
      - slack/notify:
          event: fail
          template: basic_fail_1

#--------------- Job 2 ------------------

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout

      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/server.yml \
            --tags Name=uda-capstone \
            --stack-name "server-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-east-1

      - run:
          name: Add server ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/

            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=uda-capstone" --output text)

            echo $SERVER_IP >> inventory.txt
            cat inventory.txt

      #Store
      - run:
          name: Store server ID
          command: |
            curl -H "Content-Type: text/plain" -H "token: ab-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$serverIP" https://api.memstash.io/values/serverip
            cat ~/project/.circleci/ansible/inventory.txt
            pwd

#---------------------- Job ??--------------


workflows:
  default:
    jobs:
      - deploy-infrastructure

      #- linting
      #- create-docker
      #- create-server
      #- run-app
